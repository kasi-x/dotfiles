[project]
name = "akizora"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "kashi-x", email = "kashimiya.exe@gmail.com" }
]

dependencies = [
    "install>=1.3.5",
    "pydantic>=2.6.4",
    "pydantic-settings>=2.2.1",
    "returns>=0.22.0",
    "rich>=13.7.1",
    "structlog>=24.1.0",
    "lxml>=5.2.1",
    "beautifulsoup4>=4.12.3",
    "pelican>=4.9.1",
    "google-generativeai>=0.5.0",
    "python-dotenv>=1.0.1",
    "spacy>=3.7.4",
    "pysbd>=0.3.4",
    "bunkai>=1.5.2",
    "en-core-web-sm @ https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.7.1/en_core_web_sm-3.7.1-py3-none-any.whl",
    "setuptools>=69.2.0",
]
readme = "README.md"
requires-python = ">= 3.12"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.setuptools]
package-dir = {"" = "src"}

# [tool.setuptools.packages.find]
# where = ["src"]

[tool.rye]
virtual = true
managed = true
dev-dependencies = [
    "coverage>=7.4.4",
    "pre-commit>=3.7.0",
    "pytest>=8.1.1",
    "pytest-clarity>=1.0.1",
    "pytest-cov>=5.0.0",
    "setuptools>=69.2.0",
    "tox>=4.14.2",
    "better-exceptions>=0.3.3",
    "cyclopts>=2.5.0",
    "interrogate>=1.7.0",
    "bump-my-version>=0.20.0",
    "taskipy>=1.12.2",
    "jupyterlab>=4.1.6",
    "pytest-datadir>=1.5.0",
    "pytest-mock>=3.14.0",
    "pytest-picked>=0.5.0",
    "pytest-pretty>=1.2.0",
    "codespell>=2.2.6",
    "ruff>=0.3.5",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/akizora"]

[tool.mypy]
python_version = "3.12"
plugins = [
    # "returns.contrib.mypy.returns_plugin",
    "numpy.typing.mypy_plugin",
    "pandera.mypy",
    "pydantic.mypy",
]
exclude = ['venv', '.venv']
namespace_packages = true
strict = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_unimported = true
warn_unreachable = true
allow_redefinition = true

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "-v",
    "--strict-config",
    "--strict-markers",
    "--picked",
    "--cov=src",
    "--cov-report=term",
    "--no-cov-on-fail",
]
# asyncio_mode = "auto"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
omit = ["tests/*"]
parallel = true
source = ["src"]

[tool.coverage.report]
show_missing = true
fail_under = 100
skip_covered = true
skip_empty = true
omit = [
    "*site-packages*",
    "*tests*",
    "*.tox*",
]
exclude_lines = [
    "raise NotImplementedError",
    "pragma: no-coverage",
]

[tool.pyright]
pythonVersion = "3.12"
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/typestubs",
    "**/stubs",
    "**/.pyenv",
    "build",
    "dist",
    # ".venv",
]
venvPath = "."
venv = ".venv"
stubPath = "src/stubs"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
ignore = ["src/old*", ".venv/*"]
basic = ["**"]

[tool.ruff]
target-version = "py312"
line-length = 99
lint.select = ["ALL"]
lint.logger-objects = ["logging_setup.logger"]
lint.ignore-init-module-imports = true
lint.extend-ignore = [
    "PLR6301", # Checks for the presence of unused self parameter in methods definitions.  WHYNOT: false-positive
    "T20",     # flake8-print  WHYNOT: for fast debug.
    "TRY003",  # Avoid specifying long messages outside the exception class.  WHYNOT: for fast debug.
    "D10",     # undocumented code  WHYNOT: for small project.
    "PLR0917", # Too many positional arguments ({c_pos}/{max_pos})  WHYNOT: PLR0913 is better.
    # "TD",     # flake8-todos
    # "FIX",    # flake8-fixme
    # "TCH",    # flake8-type-checking
    # "ANN10",   # Missing type annotation for self.  WHYNOT: unproductive type puzzle.(suppressed by ignore-fully-untyped = true)
    # "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {name}.  WHYNOT: false-positive. (suppressed by ignore-fully-untyped = true)
]
lint.unfixable = [
    "RET504", # unnecessary-assign
    "F401",   # remove unused-import (ignore-init-module-imports = true)
]
lint.task-tags = [
    # General Purpose Tags
    "TODO",
    "BUG",
    "FIXME",
    "DOCME",
    "HACK",
    "MEMO",
    "ISSUE",
    "MISSING",
    "HOLD",
    "WARN",
    "PLAN",
    "PROCESS",
    "TYPE",

    # More Hack
    "META",
    "INNOVATE",
    "OUTSIDE-BOX",
    "PILOT",
    "UNEXPLORED",


    # Decision Rationale
    "WHYNOT",
    "PURPOSE",
    "CONTEXT",
    "RATIONAL",
    "EXAMPLE",
    "FOLLOW",
    "POINTLESS",
    "DESIGN", # New

    # Team Communication
    "WIP",
    "BLOCKER",
    "NOTION",
    "REVIEW",
    "DISCUSS",
    "QUESTION",
    "REQUEST",

    # Production, Assumption
    "STRATEGY",
    "FUTURE",
    "MVP",
    "RISK",
    "STAKEHOLDER",
    "STORY",

    # Test-Driven Development
    "BLUE",
    "RED",
    "GREEN",
    "REFA",
    "DEPEND",
    "OVER",
    "UNCOVERED",
    "INTEGRATION",
    "EDGE-CASE",
    "SLOW",

    # Optimize and Evaluation
    "BENCHMARK",
    "EVALUATION",
    "SCALE",
    "PERFORMANCE",

    # Code Enhancement,
    "CLARITY",
    "LOGIC",
    "UPGRADE",
    "DOC-ENHANCE",
    "CLEANUP",

    # Compliance
    "SECURE",
    "PRIVACY",
    "ILLEGAL",
    "ACCESSIBILITY",
    "LOCALIZE",

    # Security #RFC2119
    "MUST",
    "MUST_NOT",
    "REQUIRED",
    "SHALL",
    "SHALL_NOT",
    "SHOULD",
    "SHOULD_NOT",
    "RECOMMENDED",
    "MAY",

    # Legacy Management
    "DEPRECATE",
    "MAINTAIN",
    "DEBT",
    "UNKNOWN",
    "PHASE-OUT",
]
fix = true
unsafe-fixes = true
respect-gitignore = true
src = ["src", "test"]
indent-width = 4

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "INP001"]
"tests/*" = [
    "ARG",     # flake8-unused-arguments
    "FBT",     # flake8-boolean-trap
    "S",       # flake8-bandit
    "E402",    # Module level import not at top of cell
    "E501",    # Line too long ({width} > {limit})
    "INP001",  # File {filename} is part of an implicit namespace package. Add an __init__.py.
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.mccabe]
max-complexity = 8

[tool.ruff.lint.pydocstyle]
convention = "google" # "google" | "numpy" | "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-line-length = 100
max-doc-length = 120

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"dask.dataframe" = "dd"
"xarray" = "xr"
"scipy" = "sp"
"skopt" = "sko"
"skimage" = "ski"
"bs4.BeautifulSoup" = "bs"
"sklearn" = "sk"
"returns" = "rt"
"pandera" = "pa"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
allow-star-arg-any = false
suppress-dummy-args = false
suppress-none-returning = false

[tool.ruff.lint.flake8-errmsg]
max-string-length = 20

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
fail-under = 95
exclude = ["setup.py", "docs", "build", "dist", "thirdParty/*", "old*"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

[tool.codespell]
skip = '*.po,*.ts,*.lock,thirdParty/*,/trial'
quiet-level = 3
ignore-words-list = "ans"


[tool.creosote]
venvs=[".venv"]
paths=["src"]
deps-file="pyproject.toml"
sections=["tool.poetry.dependencies"]
exclude-deps =[
    "rich",
    "pydantic",
    "pydantic-settings",
    "returns",
    "structlog",
    "pandera"
]

[tool.taskipy.tasks]
test = { cmd = "python -m pytest", help = "runs all tests" }
lint_ruff = "ruff src"
lint_mypy = "mypy src"

[tool.typos]
default.locale = "en_US"
files.extend-exclude = ["*.po", "*.ts", "*.lock", "thirdParty/*", "/trial"]

