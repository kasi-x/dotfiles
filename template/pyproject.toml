[tool.poetry]
name = ""
version = "0.1.0"
description = ""
authors = ["kasi-x"]
license = "private"
readme = "README.md"
packages = [{ include = "src" }]

[tool.poetry.dependencies]
python = "3.11.*"
pandera = { extras = [
    "io",
    "mypy",
    "strategies",
    "geopandas",
], version = "^0.18.0" }
pydantic = "^2.5.3"
python-dotenv = "^1.0.0"
returns = "^0.22.0"
rich = "^13.7.0"
structlog = "^23.3.0"

[tool.poetry.group.dev.dependencies]
coverage = "^7.4.0"
pre-commit = "^3.6.0"
pytest = "^7.4.3"
pytest-clarity = "^1.0.1"
pytest-cov = "^4.1.0"
setuptools = "^69.0.3"
tox = "^4.11.4"
better-exceptions = "^0.3.3"
# jupyterlab = "^4.0.10"
# pytest-datadir = "^1.5.0"
# pytest-mock = "^3.12.0"
# pytest-picked = "^0.5.0"
# pytest-pretty = "^1.2.0"
# bpython = "^0.24"
# mypy = "^1.8.0"
# ruff = "^0.1.9"


[tool.mypy]
python_version = "3.11"
plugins = [
    "returns.contrib.mypy.returns_plugin",
    "numpy.typing.mypy_plugin",
    "pandera.mypy",
    "pydantic.mypy",
]
exclude = ['venv', '.venv']
namespace_packages = true
strict = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_unimported = true
warn_unreachable = true
allow_redefinition = true

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "-v",
    "--strict-config",
    "--strict-markers",
    "--picked",
    "--cov=src",
    "--no-cov-on-fail",
]
asyncio_mode = "auto"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
omit = ["tests/*"]
parallel = true
source = ["src"]

[tool.coverage.report]
show_missing = true
fail_under = 100
skip_covered = true
skip_empty = true

[tool.pyright]
pythonVersion = "3.11"
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/typestubs",
    "**/stubs",
    "**/.pyenv",
    "build",
    "dist",
    ".venv",
]
venvPath = "."
venv = ".venv"
stubPath = "src/stubs"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
ignore = ["src/old*", ".venv/*"]
basic = ["**"]

[tool.ruff]
task-tags = [
    # General Purpose Tags
    "TODO",
    "BUG",
    "FIXME",
    "DOCME",
    "HACK",
    "MEMO",
    "ISSUE",
    "MISSING",
    "HOLD",
    "WARN",
    "PLAN",

    # More Hack
    "META",
    "INNOVATE",
    "OUTSIDE-BOX",
    "PILOT",
    "UNEXPLORED",

    # Decision Rationale
    "WHYNOT",
    "PURPOSE",
    "CONTEXT",
    "RATIONAL",
    "EXAMPLE",
    "FOLLOW",

    # Team Communication
    "WIP",
    "BLOCKER",
    "NOTION",
    "REVIEW",
    "DISCUSS",
    "QUESTION",
    "REQUEST",

    # Production, Assumption
    "STRATEGY",
    "FUTURE",
    "MVP",
    "RISK",
    "STAKEHOLDER",
    "STORY",

    # Test-Driven Development
    "BLUE",
    "RED",
    "GREEN",
    "REFACTOR",
    "DEPENDENT",
    "OVERTEST",
    "UNCOVERED",
    "INTEGRATION",
    "EDGE-CASE",
    "SLOW",

    # Optimize and Evaluation
    "BENCHMARK",
    "EVALUATION",
    "SCALE",
    "PERF",

    # Code Enhancement,
    "CLARITY",
    "LOGIC",
    "UPGRADE",
    "DOC-ENHANCE",
    "CLEANUP",

    # Security and Compliance
    "SECURE",
    "PRIVACY",
    "ILLEGAL",
    "ACCESSIBILITY",
    "LOCALIZE",

    # Legacy Management
    "DEPRECATE",
    "MAINTAIN",
    "DEBT",
    "UNKNOWN",
    "PHASE-OUT",
]
extend-ignore = [
    "ANN10",   # Missing type annotation for self.  WHYNOT: unproductive type puzzle.
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {name}.  WHYNOT: false-positive.
    "PLR6301", # Checks for the presence of unused self parameter in methods definitions. WHYNOT: false-positive
    "T20",     # flake8-print  WHYNOT: for fast debug.
    "TRY003",  # Avoid specifying long messages outside the exception class. WHYNOT: for fast debug.
    "D10",     # undocumented code WHYNOT: for small project.
    "PLR0917", # Too many positional arguments ({c_pos}/{max_pos}) WHYNOT: PLR0913 is better.
    "PLW1641", # Checks for classes that implement __eq__ but not __hash__.  WHYNOT: rarely meaning hack
    # "TD",     # flake8-todos
    # "FIX",    # flake8-fixme     
    # "TCH",    # flake8-type-checking 
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 99
select = ["ALL"]
fix = true
unfixable = [
    "F401",   # unused-import
    "RET504", # unnecessary-assign
    # "B",      # flake8-bugbear WHYNOT: little buggy.
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"
src = ["src", "test"]
indent-width = 4

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "INP001"]
"tests/*" = [
    "ANN",     # flake8-annotations
    "ARG",     # flake8-unused-arguments
    "FBT",     # flake8-boolean-trap
    "S",       # flake8-bandit
    "E402",    # Module level import not at top of cell
    "E501",    # Line too long ({width} > {limit})
    "INP001",  # File {filename} is part of an implicit namespace package. Add an __init__.py.
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true
line-ending = "auto"
docstring-code-format = true

[tool.ruff.mccabe]
max-complexity = 8

[tool.ruff.lint.pydocstyle]
convention = "google" # "google" | "numpy" | "pep257"

[tool.ruff.isort]
force-single-line = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-line-length = 100
max-doc-length = 120

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"dask.dataframe" = "dd"
"xarray" = "xr"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.codespell]
skip = '*.po,*.ts,./src/3rdParty,./src/Test'
count = ''
quiet-level = 3
